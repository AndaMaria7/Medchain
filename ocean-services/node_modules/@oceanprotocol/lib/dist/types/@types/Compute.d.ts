import { Metadata, MetadataAlgorithm } from '@oceanprotocol/ddo-js';
export type ComputeResultType = 'algorithmLog' | 'output' | 'configrationLog' | 'publishLog';
export interface RunningPlatform {
    architecture: string;
    os: string;
}
export type ComputeResourceType = 'cpu' | 'memory' | 'storage';
export interface ComputeResourcesPricingInfo {
    type: ComputeResourceType;
    price: number;
}
export interface ComputeEnvFees {
    feeToken: string;
    prices: ComputeResourcesPricingInfo[];
}
export interface ComputeEnvFeesStructure {
    [chainId: string]: ComputeEnvFees;
}
export interface ComputeResourceRequest {
    id: string;
    amount: number;
}
export interface ComputeResource {
    id: ComputeResourceType;
    type?: string;
    kind?: string;
    total: number;
    min: number;
    max: number;
    inUse?: number;
}
export interface ComputeEnvironmentFreeOptions {
    storageExpiry?: number;
    maxJobDuration?: number;
    maxJobs?: number;
    resources?: ComputeResource[];
}
export interface ComputeEnvironment {
    id: string;
    description: string;
    consumerAddress: string;
    storageExpiry?: number;
    minJobDuration?: number;
    maxJobDuration?: number;
    maxJobs?: number;
    runningJobs: number;
    runningfreeJobs?: number;
    fees: ComputeEnvFeesStructure;
    resources?: ComputeResource[];
    free?: ComputeEnvironmentFreeOptions;
    platform?: RunningPlatform;
}
export interface ComputeResult {
    filename: string;
    filesize: number;
    type: ComputeResultType;
    index?: number;
}
export type ComputeJobMetadata = {
    [key: string]: string | number | boolean;
};
export interface ComputeJob {
    owner: string;
    did?: string;
    jobId: string;
    dateCreated: string;
    dateFinished: string;
    status: number;
    statusText: string;
    results: ComputeResult[];
    inputDID?: string[];
    algoDID?: string;
    agreementId?: string;
    expireTimestamp: number;
    metadata?: ComputeJobMetadata;
}
export interface ComputeOutput {
    publishAlgorithmLog?: boolean;
    publishOutput?: boolean;
    providerAddress?: string;
    providerUri?: string;
    metadata?: Metadata;
    metadataUri?: string;
    nodeUri?: string;
    owner?: string;
    secretStoreUri?: string;
    whitelist?: string[];
}
export declare enum FileObjectType {
    URL = "url",
    IPFS = "ipfs",
    ARWEAVE = "arweave"
}
export declare enum EncryptMethod {
    AES = "AES",
    ECIES = "ECIES"
}
export interface HeadersObject {
    [key: string]: string;
}
export interface BaseFileObject {
    type: string;
    encryptedBy?: string;
    encryptMethod?: EncryptMethod;
}
export interface UrlFileObject extends BaseFileObject {
    url: string;
    method: string;
    headers?: [HeadersObject];
}
export interface IpfsFileObject extends BaseFileObject {
    hash: string;
}
export interface ArweaveFileObject extends BaseFileObject {
    transactionId: string;
}
export interface ComputeAsset {
    fileObject?: BaseFileObject;
    documentId: string;
    serviceId: string;
    transferTxId?: string;
    userdata?: {
        [key: string]: any;
    };
}
export interface ComputeAlgorithm {
    fileObject?: BaseFileObject;
    documentId?: string;
    serviceId?: string;
    meta?: MetadataAlgorithm;
    transferTxId?: string;
    algocustomdata?: {
        [key: string]: any;
    };
    userdata?: {
        [key: string]: any;
    };
}
export interface ComputePayment {
    chainId: number;
    token: string;
    maxJobDuration: number;
}
export interface ValidationResponse {
    isValid: boolean;
    message: string;
}
