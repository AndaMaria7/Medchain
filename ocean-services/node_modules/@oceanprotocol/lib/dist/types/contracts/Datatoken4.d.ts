import { Datatoken } from './Datatoken.js';
import { Bytes, Signer } from 'ethers';
import { AbiItem, ReceiptOrEstimate } from '../@types/index.js';
import { AccessListContract } from './AccessList.js';
import { Config } from '../config/index.js';
export declare class Datatoken4 extends Datatoken {
    accessList: AccessListContract;
    fileObject: Bytes;
    getDefaultAbi(): AbiItem[];
    /**
     * Instantiate Datatoken class
     * @param {Signer} signer The signer object.
     * @param {string | number} [network] Network id or name
     * @param {Config} [config] The configuration object.
     * @param {AbiItem[]} [abi] ABI array of the smart contract
     */
    constructor(signer: Signer, fileObject: Bytes, network?: string | number, config?: Config, abi?: AbiItem[]);
    setFileObj(fileObj: Bytes): void;
    /**
     * getAllowListContract - It returns the current allowList contract address
     * @param dtAddress datatoken address
     * @return {Promise<string>}
     */
    getAllowlistContract(dtAddress: string): Promise<string>;
    /**
     * getDenyListContract - It returns the current denyList contract address
     * @param dtAddress datatoken address
     * @return {Promise<string>}
     */
    getDenylistContract(dtAddress: string): Promise<string>;
    /** setAllowListContract
     * This function allows to set another address for allowListContract, only by datatoken deployer
     * only DatatokenDeployer can succeed
     * @param {String} dtAddress Datatoken address
     * @param {String} address Contract address
     * @param {String} consumer User address
     * @param {Boolean} estimateGas if True, return gas estimate
     * @return {Promise<ReceiptOrEstimate>} returns the transaction receipt or the estimateGas value
     */
    setAllowListContract<G extends boolean = false>(dtAddress: string, address: string, consumer: string, estimateGas?: G): Promise<ReceiptOrEstimate<G>>;
    /** setDenyListContract
     * This function allows to set another address for allowListContract, only by datatoken deployer
     * only DatatokenDeployer can succeed
     * @param {String} dtAddress Datatoken address
     * @param {String} address Contract address
     * @param {String} consumer User address
     * @param {Boolean} estimateGas if True, return gas estimate
     * @return {Promise<ReceiptOrEstimate>} returns the transaction receipt or the estimateGas value
     */
    setDenyListContract<G extends boolean = false>(dtAddress: string, address: string, consumer: string, estimateGas?: G): Promise<ReceiptOrEstimate<G>>;
    /** setFileObject
     * This function allows to set file object in ecnrypted format, only by datatoken deployer
     * only DatatokenDeployer can succeed
     * @param {String} dtAddress Datatoken address
     * @param {String} address User address
     * @param {Boolean} estimateGas if True, return gas estimate
     * @return {Promise<ReceiptOrEstimate>} returns the transaction receipt or the estimateGas value
     */
    setFileObject<G extends boolean = false>(dtAddress: string, address: string, estimateGas?: G): Promise<ReceiptOrEstimate<G>>;
    /**
     * getFileObject - It returns the consumer's file object encrypted format.
     * @param {String} dtAddress datatoken address
     * @param {Number} serviceIndex - service index
     * @param {String} providerAddress
     * @param {Bytes} providerSignature
     * @param {Bytes} consumerData
     * @param {Bytes} consumerSignature
     * @param {String} consumerAddress
     * @return {Promise<Bytes>} returns file object
     */
    getFileObject(dtAddress: string, serviceIndex: number, providerAddress: string, providerSignature: Bytes, consumerData: Bytes, consumerSignature: Bytes, consumerAddress: string): Promise<Bytes>;
}
