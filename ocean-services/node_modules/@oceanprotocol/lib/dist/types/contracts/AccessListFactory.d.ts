import { BigNumber, Signer } from 'ethers';
import { Config } from '../config/index.js';
import { AbiItem, ReceiptOrEstimate } from '../@types/index.js';
import { SmartContractWithAddress } from './SmartContractWithAddress.js';
/**
 * Provides an interface for Access List Factory contract
 */
export declare class AccesslistFactory extends SmartContractWithAddress {
    getDefaultAbi(): AbiItem[];
    /**
     * Instantiate AccessListFactory class
     * @param {string} address The factory contract address.
     * @param {Signer} signer The signer object.
     * @param {string | number} [network] Network id or name
     * @param {Config} [config] The configuration object.
     * @param {AbiItem[]} [abi] ABI array of the smart contract
     */
    constructor(address: string, signer: Signer, network?: string | number, config?: Config, abi?: AbiItem[]);
    /**
     * Create new Access List Contract
     * @param {string} nameAccessList The name for access list.
     * @param {string} symbolAccessList The symbol for access list.
     * @param {string[]} tokenURI Token URIs list.
     * @param {boolean} transferable Default false, to be soulbound.
     * @param {string} owner Owner of the access list.
     * @param {string[]} user Users of the access lists as addresses.
     * @param {Boolean} [estimateGas] if True, return gas estimate
     * @return {Promise<string|BigNumber>} The transaction hash or the gas estimate.
     */
    deployAccessListContract<G extends boolean = false>(nameAccessList: string, symbolAccessList: string, tokenURI: string[], transferable: boolean, owner: string, user: string[], estimateGas?: G): Promise<G extends false ? string : BigNumber>;
    /**
     *  Get Factory Owner
     * @return {Promise<string>} Factory Owner address
     */
    getOwner(): Promise<string>;
    /**
     *  Is a list contract soul bound?
     * @param {String} contractAddress list contract address
     * @return {Promise<boolean>} is soulbound?
     */
    isSoulbound(contractAddress: string): Promise<boolean>;
    /**
     *  Is a list contract deployed?
     * @param {String} contractAddress list contract address
     * @return {Promise<boolean>} is deployed?
     */
    isDeployed(contractAddress: string): Promise<boolean>;
    /**
     * changeTemplateAddress - only factory Owner
     * @param {String} owner caller address
     * @param {Number} templateAddress address of the template we want to change
     * @param {Boolean} estimateGas if True, return gas estimate
     * @return {Promise<ReceiptOrEstimate>} returns the transaction receipt or the estimateGas value, current token template count
     */
    changeTemplateAddress<G extends boolean = false>(owner: string, templateAddress: string, estimateGas?: G): Promise<ReceiptOrEstimate<G>>;
}
